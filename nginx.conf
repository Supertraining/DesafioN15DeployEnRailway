#CONSIGNA:
# Redirigir todas las consultas a /api/randoms a un cluster de servidores escuchando en el puerto 8081. El cluster será creado desde node utilizando el módulo nativo cluster.
# El resto de las consultas, redirigirlas a un servidor individual escuchando en el puerto 8080.

# worker_processes  1;
# events {
#     worker_connections  1024;
# }
# http {
#     include       mime.types;
#     default_type  application/octet-stream;

#     sendfile        on;
#     keepalive_timeout  65;

#     upstream node_app {
#         server 127.0.0.1:8080;
#     }
#     upstream api_randoms {
#         server 127.0.0.1:8081;
#     }

#     server {
#         listen       80;
#         server_name  localhost;
#         root         ../DesafioNº13/public;
#         location /api/randoms {
#             proxy_pass http://api_randoms/api/randoms;
#             }
#         location / {
#             proxy_pass http://node_app/;
#             }
#         error_page   500 502 503 504  /50x.html;
#         location = /50x.html {
#             root   html;
#         }
#     }
# }

#CONSIGNA:
# Luego, modificar la configuración para que todas las consultas a /api/randoms sean redirigidas a un cluster de servidores gestionado desde nginx, repartiéndolas equitativamente entre 4 instancias escuchando en los puertos 8082, 8083, 8084 y 8085 respectivamente.


worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    upstream node_app {
        server 127.0.0.1:8080;
    }
    upstream api_randoms {
        server 127.0.0.1:8082 weight=1;
        server 127.0.0.1:8083 weight=1;
        server 127.0.0.1:8084 weight=1;
        server 127.0.0.1:8085 weight=1;
    }

    server {
        listen       80;
        server_name  localhost;
        root         ../DesafioNº13/public;

        location /api/randoms {
            proxy_pass http://api_randoms/api/randoms;
            }

        location / {
            proxy_pass http://node_app/;
            }
            
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}